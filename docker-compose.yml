version: "3.9"

services:
  postgres:
    image: postgres:14
    restart: unless-stopped
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - ${POSTGRES_PORT?Postgres port}:5432
    networks:
      - backend
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Postgres password}
      POSTGRES_USER: ${POSTGRES_USER:?Postgres username}
      POSTGRES_DB: ${POSTGRES_DB:?Postgres DB name}
    healthcheck:
      test: pg_isready -U "$$POSTGRES_USER" -d "$$POSTGRES_DB"
      interval: 15s
      timeout: 2s
      retries: 10

  data:
    build: data
    depends_on:
      - postgres
    restart: unless-stopped
    volumes:
      - ./data/sources:/app/data/sources
      - ./data/precomputed:/app/data/precomputed:ro
    networks:
      - backend
    environment:
      POSTGRES_HOST: postgres:5432
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?Postgres password}
      POSTGRES_USER: ${POSTGRES_USER:?Postgres username}
      POSTGRES_DB: ${POSTGRES_DB:?Postgres DB name}
      
      # Uncomment to skip analysis and only perform ingestion.
      # SKIP_ANALYSIS: 1
      
      # Data source directories, comment out to skip ingestion.
      DEFECTS_SOURCE: ${DEFECTS_SOURCE}
      INSPECTIONS_SOURCE_DIR: ${INSPECTIONS_SOURCE_DIR}
      STATIONS_SOURCE: ${STATIONS_SOURCE}
      # VEHICLES_SOURCE: ${VEHICLES_SOURCE}

      # Precomputed models directory
      PRECOMPUTED_DATA: /app/data/precomputed

  api:
    image: postgrest/postgrest:latest
    depends_on:
      - postgres
    restart: unless-stopped
    ports:
      - ${API_PORT:?API port}:3000
    networks:
      - backend
      - frontend
    environment:
      PGRST_DB_URI: postgres://${POSTGREST_USER:?PostgREST username}:${POSTGREST_PASSWORD:?PostgREST password}@postgres:5432/${POSTGRES_DB:?PostgREST database name}
      PGRST_DB_SCHEMA: ${POSTGREST_SCHEMA:?PostgREST database schema}
      PGRST_DB_ANON_ROLE: ${POSTGREST_ANON_ROLE:?PostgREST anon role}
      PGRST_OPENAPI_SERVER_PROXY_URI: ${API_DOMAIN:?API domain name incl. scheme}:${API_PORT:?API port}
      # Limit the maximum row count in all responses, 1500 being a little bit
      # more than what's required to read all defects at once.
      PGRST_DB_MAX_ROWS: 1500

  web:
    build:
      context: web/app
      args:
        # This env variable used in next.config.js can only be set during build.
        # But since you can't access the running api at this URL while building,
        # SSG at build time is not usable in Next.js 
        - API_URL=http://api:3000
      network: host
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - frontend
    ports:
      - "${WEB_PORT:?Web server port}:3000"

  pgadmin:
    image: dpage/pgadmin4:latest
    depends_on:
      - postgres
    restart: unless-stopped
    volumes:
      - pgadmin:/var/lib/pgadmin
    networks:
      - backend
    ports:
      - ${PGADMIN_PORT:?PgAdmin port}:80
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:?PgAdmin email}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:?PgAdmin password}

  swagger:
    image: swaggerapi/swagger-ui
    restart: unless-stopped
    ports:
      - ${SWAGGER_PORT:?Swagger UI port}:8080
    environment:
      API_URL: ${API_DOMAIN:?API domain name incl. scheme}:${API_PORT:?API port}/

volumes:
  postgres:
  pgadmin:


networks:
  backend:
  frontend:
